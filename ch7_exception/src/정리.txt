exception(예외)
발생시점
1) 컴파일 에러 : 컴파일 시에 발생하는 에러
2) 런타임 에러 : 실행 시에 발생하는 에러
     (1) error : 메모리 부족, 스택오버플로우
     (2) exception : 수습 가능

     Object
        |
        |
    Throwable
        |
|------------------------------------------|
Exception                                Error
   |- IOException
   |- ClassNotFoundException
   |- RuntimeException
           |-- ArithmeticException
           |-- NullPointerException


Exception 처리
1) try ~ cacth 문

try{
    예외가 발생할 가능성이 있는 문장
}cacth(Exception ex){
    Exception 발생시 처리하기 위한 문장
}cacth(Exception ex){
    Exception 발생시 처리하기 위한 문장
}cacth(Exception ex){
    Exception 발생시 처리하기 위한 문장
}

catch 문 작성 시 multi 블럭 가능
try{
    예외가 발생할 가능성이 있는 문장
}cacth(ArrayIndexOutOfBoundsException | ArithmeticException e){
    Exception 발생시 처리하기 위한 문장
}

2) try~cacth~finally
finally : 예외의 발생여부와 상관없이 반드시 실행되어야 할 코드 작성
          ex) 리소스(입출력스트림, 소켓..)의 close() 호출 - sc.close()

3) 강제 예외 발생 - Exception 사용
   throw new Exception("")

4) 예외 전달
   throws Exception


try-with-resources : 자동 리소스 닫기
+ finally 에서 주로 자원닫기 구문 실행 => 자바 버전 1.7부터 자동 닫기 지원
finally 로 개발자가 자원 닫기를 직접 명시하지 않아도 됨

try(자동으로 닫아야 하는 객체 생성){

}catch(Excetpion ){

}
   